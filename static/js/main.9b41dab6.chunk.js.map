{"version":3,"sources":["components/ContactCard.js","App.js","serviceWorker.js","index.js"],"names":["ContactCard","props","state","name","undefined","mobile","work","email","className","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAGqBA,E,kDAEjB,WAAYC,GACX,IAAD,8BACI,cAAMA,IACDC,MACL,CACIC,UAAqBC,IAAfH,EAAME,KAAqBF,EAAME,KAAO,WAC9CE,YAAyBD,IAAjBH,EAAMI,OAAuBJ,EAAMI,OAAS,eACpDC,UAAqBF,IAAfH,EAAMK,KAAqBL,EAAMK,KAAO,GAC9CC,WAAuBH,IAAhBH,EAAMM,MAAsBN,EAAMM,MAAQ,oBAPzD,E,qDAaI,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cACX,4BAAKC,KAAKP,MAAMC,OAGpB,yBAAKK,UAAU,aACX,4BACI,uCAAaC,KAAKP,MAAMG,QACxB,qCAAWI,KAAKP,MAAMI,MACtB,sCAAYG,KAAKP,MAAMK,e,GA3BVG,aCyC1BC,MAvCf,WAEI,OACI,yBAAKH,UAAU,OACX,4BAAQA,UAAU,cACd,6CAEA,6BAASA,UAAU,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIL,KAAK,WACLE,OAAO,eACPC,KAAK,eACLC,MAAM,kBAEV,kBAAC,EAAD,CACIJ,KAAK,cACLE,OAAO,eACPC,KAAK,eACLC,MAAM,eAEV,kBAAC,EAAD,CACIJ,KAAK,eACLE,OAAO,eACPC,KAAK,eACLC,MAAM,0BAEV,kBAAC,EAAD,CACIJ,KAAK,YACLE,OAAO,MACPC,KAAK,MACLC,MAAM,sBCxBVK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9b41dab6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class ContactCard extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            name: props.name !== undefined ? props.name : \"John Doe\",\r\n            mobile: props.mobile !== undefined ? props.mobile : \"000-000-0000\",\r\n            work: props.work !== undefined ? props.work : \"\",\r\n            email: props.email !== undefined ? props.email : \"email@domain.com\"\r\n        };\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"contact-card\">\r\n                <div className=\"container\">\r\n                    <div className=\"card-front\">\r\n                        <h3>{this.state.name}</h3>\r\n                    </div>\r\n\r\n                    <div className=\"card-back\">\r\n                        <ul>\r\n                            <li>mobile: {this.state.mobile}</li>\r\n                            <li>work: {this.state.work}</li>\r\n                            <li>email: {this.state.email}</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nContactCard.propTypes =\r\n{\r\n    name: PropTypes.string.isRequired,\r\n    mobile: PropTypes.string.isRequired,\r\n    work: PropTypes.string,\r\n    email: PropTypes.string.isRequired\r\n};","import React from 'react';\nimport './App.css';\n\nimport ContactCard from './components/ContactCard';\n\nfunction App() \n{\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Contact Cards</h1>\n\n                <section className=\"card-grid\">\n                    <ContactCard />\n                    <ContactCard \n                        name=\"Jane Doe\" \n                        mobile=\"111-111-1111\"\n                        work=\"222-222-2222\"\n                        email=\"jane@work.net\"\n                    />\n                    <ContactCard \n                        name=\"Random Dude\"\n                        mobile=\"333-333-3333\"\n                        work=\"444-444-4444\"\n                        email=\"dude@me.io\"\n                    />\n                    <ContactCard\n                        name=\"Another Dude\"\n                        mobile=\"555-555-5555\"\n                        work=\"666-666-6666\"\n                        email=\"anotherdude@gmail.com\"\n                    />\n                    <ContactCard\n                        name=\"Emergency\"\n                        mobile=\"911\"\n                        work=\"911\"\n                        email=\"help@help.gov\"\n                    />\n                </section>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}